{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["GRID_SIZE","timer","Grid","children","className","style","width","height","Cell","live","rest","getDefaultState","cells","Array","from","length","map","iterations","running","boards","App","useState","modelState","setModelState","match","useEffect","find","cell","clearTimeout","setTimeout","update","new_cells","index","row_index","Math","floor","column_index","live_neighbours","undefined","filter","x","reduce","acc","check_index","indexOf","doLogic","new_board","join","still","onClick","cell_index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.579cebd5.chunk.js","sourcesContent":["import { getByDisplayValue } from '@testing-library/react';\nimport React, { useState, useEffect} from 'react'\nimport './App.css';\n\nconst GRID_SIZE = 50\nconst CELL_SIZE = 20\nconst SPEED = 100\nconst MAX_ITERATIONS = 100\n\nlet timer = null\n\nconst Grid = ({children}) => <div className=\"grid\" style={{width: `${GRID_SIZE*CELL_SIZE}px`, height: `${GRID_SIZE*CELL_SIZE}px`}}>{children}</div>\n\n\nconst Cell = ({live = false, ...rest}) => <div {...rest} className={'cell' + (live ?' live':'')}></div>\n\nconst getDefaultState = () => ({\n  cells: Array.from({length: GRID_SIZE*GRID_SIZE}).map(() => 0),\n  iterations: 0,\n  running: false,\n  boards: []\n})\n\n\nconst doLogic = (cells, index) => {\n\n  const row_index = Math.floor(index/GRID_SIZE)\n  const column_index = index%GRID_SIZE\n  ///  NW  N  NW\n  ///  E   +  W\n  ///  SE  S  SW\n  const checks = [\n    row_index > 1 && column_index > 1 ? index - GRID_SIZE - 1 : undefined, // NW\n    row_index > 1 ? index - GRID_SIZE : undefined, // N\n    row_index > 1 && column_index < GRID_SIZE ? index - GRID_SIZE + 1 : undefined, // NE\n   \n    column_index > 1 ? index - 1 : undefined, // W\n    column_index < GRID_SIZE ? index + 1 : undefined, // E\n\n    row_index < GRID_SIZE && column_index > 1 ? index + GRID_SIZE - 1 : undefined, // SW\n    row_index < GRID_SIZE ? index + GRID_SIZE : undefined, // S\n    row_index < GRID_SIZE && column_index < GRID_SIZE ? index + GRID_SIZE + 1 : undefined, // SE\n    \n  ].filter(x=>x)\n\n\n  const live_neighbours = checks.reduce((acc, check_index) => cells[check_index] ? acc+1 : acc, 0 )\n  \n  if (cells[index] && [2,3].indexOf(live_neighbours) > -1) {\n    return true\n  } else if (!cells[index] && live_neighbours == 3) {\n    return true\n  } else {\n    return false  \n  }\n\n}\n\n\n\n\nconst App = () => {\n\n  const [modelState, setModelState] = useState(getDefaultState())\n\n\n  const {cells, iterations, running, match} = modelState\n\n\n\n  const [boards, setBoards] = useState([])\n\n  const reset = () => {\n    clearTimeout(timer)\n    setModelState(getDefaultState())\n\n  }\n\n  const toggleCell = (cell_index) => !running && setModelState({...modelState, cells: modelState.cells.map((live, index) => cell_index == index ? !live : live)})\n\n  const toggleRunning = () => setModelState({...modelState, running: !modelState.running, boards: !modelState.running  ? [] : modelState.boards, iterations: !modelState.running  ? 0 : modelState.iterations})\n\n  useEffect(() => {\n    if (!running || modelState.iterations >= MAX_ITERATIONS || !cells.find((cell)=> !!cell) ) {\n      clearTimeout(timer)\n      setModelState({...modelState, running: false})\n    } else if (running) {\n      clearTimeout(timer)\n      timer = setTimeout(update, SPEED)\n     \n    }\n\n  }, [cells, running])\n\n  const update = () => {\n      const new_cells = modelState.cells.map((live, index) => doLogic(cells, index))\n      const new_board = new_cells.join(',')\n      setModelState({\n      ...modelState, \n      iterations: modelState.iterations+1, \n      cells: new_cells,\n      boards: modelState.boards[modelState.boards.length-1] != new_board ? [...modelState.boards, new_board] : modelState.boards,\n      still: modelState.boards[modelState.boards.length-1] == new_board,\n      match: modelState.boards.indexOf(new_board),\n      running: (modelState.boards[modelState.boards.length-1] == new_board) ? false : modelState.running\n      \n    })\n  }\n\n  \n\n  return  <>\n        <button onClick={toggleRunning}>{running ? 'stop' : 'start'}</button>\n        <button onClick={reset}>reset</button>\n        <h1>Iterations: {iterations}</h1>\n        <h1>Status: {\n                    (modelState.still && 'Still') || \n                    (!modelState.still && modelState.match > -1 && modelState.match <= modelState.iterations && \"Oscillating\") ||\n                    (modelState.running && 'Running') || \n                    'Stopped'\n                    }\n          </h1>\n          <Grid>{cells.map((live, index) => <Cell onClick={() => toggleCell(index)} key={index} live={live} />)}</Grid>\n        </>\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}