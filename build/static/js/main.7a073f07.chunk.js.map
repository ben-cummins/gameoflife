{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["GRID_SIZE","timer","demos","label","cells","Grid","children","className","style","width","height","Cell","live","rest","getDefaultState","Array","from","length","map","iterations","running","boards","App","useState","modelState","setModelState","match","reset","clearTimeout","useEffect","find","cell","setTimeout","update","new_cells","index","row_index","Math","floor","column_index","live_neighbours","undefined","filter","x","reduce","acc","check_index","indexOf","doLogic","new_board","join","still","demo","onClick","base_index","round","console","log","slice","loadDemo","cell_index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7a073f07.chunk.js","sourcesContent":["import { getByDisplayValue } from '@testing-library/react';\nimport React, { useState, useEffect } from 'react'\nimport './App.css';\n\nconst GRID_SIZE = 50\nconst CELL_SIZE = 20\nconst SPEED = 100\nconst MAX_ITERATIONS = 100\n\nlet timer = null\n\nconst demos = [\n  { \n    label: \"oscillating lines\", \n    cells: [\n      [0, 0],[0,-1], [0, 1],[-5, 0],[-5,-1], [-5, 1],[5, 0], [5,-1], [5, 1],\n    ]  \n  },\n  { \n    label: \"Penta-decathlon\", \n    cells: [\n      [0, -5],\n      [-1, -4],[0, -4],[1, -4],\n      [-2, -3],[-1, -3],[0, -3],[1, -3],[2, -3],\n\n      [-2, 4],[-1, 4],[0, 4],[1, 4],[2, 4],\n      [-1, 5],[0, 5],[1, 5],\n      [0, 6],\n\n      \n\n    ]  \n  },\n  { \n    label: \"glider\", \n    cells: [\n      [-15, -15], [-14, -15], [-13, -15],[-13, -16], [-14, -17]\n    ]\n  },\n  { \n    label: \"ben \", \n    cells: [\n      [0, -7],\n      [-1, -6],[0, -6],[1, -6],\n      [-2, -5],[-1, -5],[0, -5],[1, -5],[2, -5],\n\n      [-2, 5],[-1, 5],[0, 5],[1, 5],[2, 5],\n      [-1, 6],[0, 6],[1, 6],\n      [0, 7],\n\n      [-5, 0],\n      [-4, -1],[-4, 0],[-4, 1],\n      [-3, -2],[-3, -1],[-3, 0],[-3, 1],[-3, 2],\n\n      [3, -2],[3, -1],[3, 0],[3, 1],[3, 2],\n      [4, -1],[4, 0],[4, 1],\n      [5, 0],\n      \n\n    ]  \n  }\n]\n\n\n\nconst Grid = ({ children }) => <div className=\"grid\" style={{ width: `${GRID_SIZE * CELL_SIZE}px`, height: `${GRID_SIZE * CELL_SIZE}px` }}>{children}</div>\n\n\nconst Cell = ({ live = false, ...rest }) => <div {...rest} className={'cell' + (live ? ' live' : '')}></div>\n\nconst getDefaultState = (cells = null) => ({\n  cells: cells || Array.from({ length: GRID_SIZE * GRID_SIZE }).map(() => 0),\n  iterations: 0,\n  running: false,\n  boards: []\n})\n\n\nconst doLogic = (cells, index) => {\n\n  const row_index = Math.floor(index / GRID_SIZE)\n  const column_index = index % GRID_SIZE\n  ///  NW  N  NW\n  ///  E   +  W\n  ///  SE  S  SW\n  const checks = [\n    row_index > 1 && column_index > 1 ? index - GRID_SIZE - 1 : undefined, // NW\n    row_index > 1 ? index - GRID_SIZE : undefined, // N\n    row_index > 1 && column_index < GRID_SIZE ? index - GRID_SIZE + 1 : undefined, // NE\n\n    column_index > 1 ? index - 1 : undefined, // W\n    column_index < GRID_SIZE ? index + 1 : undefined, // E\n\n    row_index < GRID_SIZE && column_index > 1 ? index + GRID_SIZE - 1 : undefined, // SW\n    row_index < GRID_SIZE ? index + GRID_SIZE : undefined, // S\n    row_index < GRID_SIZE && column_index < GRID_SIZE ? index + GRID_SIZE + 1 : undefined, // SE\n\n  ].filter(x => x)\n\n\n  const live_neighbours = checks.reduce((acc, check_index) => cells[check_index] ? acc + 1 : acc, 0)\n\n  if (cells[index] && [2, 3].indexOf(live_neighbours) > -1) {\n    return true\n  } else if (!cells[index] && live_neighbours == 3) {\n    return true\n  } else {\n    return false\n  }\n\n}\n\n\n\n\nconst App = () => {\n\n  const [modelState, setModelState] = useState(getDefaultState())\n\n\n  const { cells, iterations, running, match } = modelState\n\n\n\n  const [boards, setBoards] = useState([])\n\n  const reset = (cells = null) => {\n    clearTimeout(timer)\n    setModelState(getDefaultState(cells))\n\n  }\n\n  const loadDemo = (demo) => {\n    const base_index = Math.floor(GRID_SIZE/2)*GRID_SIZE+Math.round(GRID_SIZE/2)\n\n    let cells = Array.from({ length: GRID_SIZE * GRID_SIZE }).map(() => 0)\n\n    \n    reset(demo.reduce((cells, cell) => {\n      const index = base_index + (cell[1] * GRID_SIZE) + cell[0]\n      console.log({base_index, index, cell})\n      return [...cells.slice(0, index -1), 1, ...cells.slice(index)]\n\n    }, cells))\n\n\n\n  }\n\n  const toggleCell = (cell_index) => !running && setModelState({ ...modelState, cells: modelState.cells.map((live, index) => cell_index == index ? !live : live) })\n\n  const toggleRunning = () => setModelState({ ...modelState, running: !modelState.running, boards: !modelState.running ? [] : modelState.boards, iterations: !modelState.running ? 0 : modelState.iterations })\n\n  useEffect(() => {\n    if (!running || modelState.iterations >= MAX_ITERATIONS || !cells.find((cell) => !!cell)) {\n      clearTimeout(timer)\n      setModelState({ ...modelState, running: false })\n    } else if (running) {\n      clearTimeout(timer)\n      timer = setTimeout(update, SPEED)\n\n    }\n\n  }, [cells, running])\n\n  const update = () => {\n    const new_cells = modelState.cells.map((live, index) => doLogic(cells, index))\n    const new_board = new_cells.join(',')\n    setModelState({\n      ...modelState,\n      iterations: modelState.iterations + 1,\n      cells: new_cells,\n      boards: modelState.boards[modelState.boards.length - 1] != new_board ? [...modelState.boards, new_board] : modelState.boards,\n      still: modelState.boards[modelState.boards.length - 1] == new_board,\n      match: modelState.boards.indexOf(new_board),\n      running: (modelState.boards[modelState.boards.length - 1] == new_board) ? false : modelState.running\n\n    })\n  }\n\n\n\n  return <>\n\n    {demos.map(demo => <button onClick={() => loadDemo(demo.cells)}>load {demo.label} demo</button>)}\n    <br /><br />\n    <button onClick={toggleRunning}>{running ? 'stop' : 'start'}</button>\n    <button onClick={reset}>reset</button>\n    <h1>Iterations: {iterations}</h1>\n    <h1>Status: {\n      (modelState.still && 'Still') ||\n      (!modelState.still && modelState.match > -1 && modelState.match <= modelState.iterations && \"Oscillating\") ||\n      (modelState.running && 'Running') ||\n      'Stopped'\n    }\n    </h1>\n    <Grid>{cells.map((live, index) => <Cell onClick={() => toggleCell(index)} key={index} live={live} />)}</Grid>\n  </>\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}